<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>js on Blog</title><link>https://xtyi.github.io/tags/js/</link><description>Recent content in js on Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 12 Apr 2018 13:38:28 +0800</lastBuildDate><atom:link href="https://xtyi.github.io/tags/js/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript 的 this 是什么？</title><link>https://xtyi.github.io/posts/js-this/</link><pubDate>Thu, 12 Apr 2018 13:38:28 +0800</pubDate><guid>https://xtyi.github.io/posts/js-this/</guid><description>this 🔗理解 JS 的 this 实际上非常简单，只需要了解 call 就行了
接下来，我们都使用 call 来调用函数，因为这才是 JS 最原始的函数调用方式
function foo() { &amp;#39;use strict&amp;#39; console.log(this) console.log(arguments) } foo.call() foo.call({name: &amp;#39;nada&amp;#39;}) foo.call({name: &amp;#39;nada&amp;#39;}, 1, 2, 3) 上面三次调用打印的内容如下 可以看到，当我们什么都不传入的时候 this 为 undefined，而当我们传入一个对象作为第一个参数时，this 就是这个对象
Arguments 对象是其它参数组成的一个伪数组
现在，你已经知道 this 就是 call 调用时传入的第一个参数，那么 this 到底有什么用呢 ？正常调用函数时为什么没传 this ？
我们不使用 this 写一段代码感受一下
const person = { name: &amp;#39;nada&amp;#39;, greet(person) { console.log(`Hey, I&amp;#39;m ${person.name}`) } } person.</description></item></channel></rss>