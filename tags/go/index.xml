<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Blog</title><link>https://xtyi.github.io/tags/go/</link><description>Recent content in go on Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 24 Feb 2022 13:38:28 +0800</lastBuildDate><atom:link href="https://xtyi.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 错误处理</title><link>https://xtyi.github.io/posts/go-error-handling/</link><pubDate>Thu, 24 Feb 2022 13:38:28 +0800</pubDate><guid>https://xtyi.github.io/posts/go-error-handling/</guid><description>Go 语言如何表示错误 🔗内置接口 🔗Go 语言内置了一个接口类型 error
type error interface { Error() string } 所有实现了 error 接口的类型被称为错误类型(Error Type)
错误类型的值表示一个错误的发生
error 接口只定义了一个方法 Error()，该方法返回一个字符串，用来描述错误信息
注意：Error() 方法是为人类设计的，而非代码
Error() 返回的错误信息只应该被存储在日志中，或是被打印到屏幕上，用于人类查看，绝不能在代码中检查该错误信息，依赖于该错误信息决定程序的执行逻辑
例如，下面的代码是不好的
func main() { content, err := os.ReadFile(&amp;#34;example.txt&amp;#34;) errInfo := err.Error() switch errInfo { case &amp;#34;open example.txt: no such file or directory&amp;#34;: // handling error: create file case &amp;#34;open example.txt: permission denied&amp;#34;: // handling error: modify permission } } errors 包中的错误类型 🔗Go 语言在标准库的 errors 包中定义了一个非常简单的错误类型</description></item></channel></rss>